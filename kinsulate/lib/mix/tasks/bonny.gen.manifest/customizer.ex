defmodule Mix.Tasks.Bonny.gen().manifest.KInsulateCustomizer do
  @moduledoc """
  Implements a callback to override manifests generated by `mix bonny.gen.manifest`
  """

  @doc """
  This function is called for every resource generated by `mix bonny.gen.manifest`.
  Use pattern matching to override specific resources.

  Be careful in your pattern matching. Sometimes the map keys are strings,
  sometimes they are atoms.

  ###Â Examples

  def override(%{kind: "ServiceAccount"} = resource) do
    put_in(resource, ~w(metadata labels foo)a, "bar")
  end
  """

  @spec override(Bonny.Resource.t()) :: Bonny.Resource.t()
  def override(%{kind: "Deployment"} = resource) do
    %{resource | spec: %{resource.spec | template: update_template(resource)}}
  end

  # fallback
  def override(resource), do: resource

  defp update_template(resource) do
    spec = resource.spec.template.spec
    container = List.first(resource.spec.template.spec.containers)

    security_context = Map.get(container, :securityContext, %{})
    updated_sc = Map.delete(security_context, :runAsUser)

    updated_spec =
      Map.put(spec, :volumes, [
        %{"name" => "bakeware-cache", "emptyDir" => %{}}
      ])

    updated_container =
      Map.put(container, :volumeMounts, [
        %{"mountPath" => "/app/.cache/bakeware/", "name" => "bakeware-cache"}
      ])

    updated_container = Map.replace(updated_container, :securityContext, updated_sc)

    updated_container = Map.put(updated_container, :ports, [%{"containerPort" => 9090}])

    updated_container =
      Map.put(updated_container, :livenessProbe, %{
        "failureThreshold" => 3,
        "httpGet" => %{
          "path" => "/health/liveness",
          "port" => 9090,
          "scheme" => "HTTP"
        },
        "initialDelaySeconds" => 30,
        "periodSeconds" => 5,
        "successThreshold" => 1,
        "timeoutSeconds" => 5
      })

    updated_container =
      Map.put(updated_container, :readinessProbe, %{
        "failureThreshold" => 3,
        "httpGet" => %{
          "path" => "/health/readiness",
          "port" => 9090,
          "scheme" => "HTTP"
        },
        "initialDelaySeconds" => 30,
        "periodSeconds" => 5,
        "successThreshold" => 1,
        "timeoutSeconds" => 5
      })

    updated_spec = %{
      updated_spec
      | containers: [updated_container]
    }

    %{
      resource.spec.template
      | spec: updated_spec
    }
  end
end
